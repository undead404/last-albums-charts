generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Album {
  artist         String        @db.VarChar(1023)
  cover          String?       @db.VarChar(1023)
  date           String?       @db.VarChar(10)
  duration       Int?
  hidden         Boolean?      @default(false)
  listeners      Int?
  mbid           String?       @unique @db.VarChar(255)
  name           String        @db.VarChar(1023)
  numberOfTracks Int?
  playcount      Int?
  registeredAt   DateTime      @default(now()) @db.Timestamp(6)
  thumbnail      String?       @db.VarChar(1023)
  weight         Float
  tags           AlbumTag[]
  places         TagListItem[]

  @@id([artist, name])
}

model AlbumTag {
  albumArtist String @db.VarChar(1023)
  albumName   String @db.VarChar(1023)
  tagName     String @db.VarChar(1023)
  count       Int
  weight      Float
  album       Album  @relation(fields: [albumArtist, albumName], references: [artist, name])
  tag         Tag    @relation(fields: [tagName], references: [name])

  @@id([albumArtist, albumName, tagName])
}

model Tag {
  albumsScrapedAt DateTime?     @db.Timestamp(6)
  listCheckedAt   DateTime?     @db.Timestamp(6)
  listUpdatedAt   DateTime?     @db.Timestamp(6)
  name            String        @id @db.VarChar(1023)
  power           BigInt?
  registeredAt    DateTime      @default(now()) @db.Timestamp(6)
  albums          AlbumTag[]
  list            TagListItem[]
}

model TagListItem {
  albumArtist String   @db.VarChar(1023)
  albumName   String   @db.VarChar(1023)
  place       Int
  tagName     String   @db.VarChar(1023)
  updatedAt   DateTime @default(now()) @db.Timestamp(6)
  album       Album    @relation(fields: [albumArtist, albumName], references: [artist, name])
  tag         Tag      @relation(fields: [tagName], references: [name])

  @@id([tagName, place])
  @@unique([albumArtist, albumName, tagName], name: "TagListItem_albumArtist_albumName_tagName_key")
}
