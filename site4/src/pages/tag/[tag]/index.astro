---
import { stat } from 'node:fs/promises';
import path from 'node:path';

import filenamify from 'filenamify';
import constant from 'lodash/constant';
import isEmpty from 'lodash/isEmpty';
import isString from 'lodash/isString';
import map from 'lodash/map';
import split from 'lodash/split';

import AlbumsTable from '../../../components/albums-table';
import DateAgo from '../../../components/date-ago';
import TagBackgroundImage from '../../../components/tag-background-image.astro';
import Layout from '../../../layouts/layout.astro';
import { initDatabase } from '../../../services/data/database';
import getRelatedTags from '../../../services/data/get-related-tags';
import getTag from '../../../services/data/get-tag';
import listTags from '../../../services/data/list-tags';

const COLLAGES_FOLDER = path.join('public', 'tag-collage');

const returnTrue = constant(true);
const returnFalse = constant(false);

export interface Props {
  tagName: string;
}
const { tag } = Astro.params;
if (!isString(tag)) {
  throw new Error(`tag param of wrong type: ${tag}`);
}
await initDatabase();
const tagInfo = await getTag(tag);

const filename = `${filenamify(tag)}.jpeg`;
const preview = (await stat(path.join(COLLAGES_FOLDER, filename)).then(
  returnTrue,
  returnFalse,
))
  ? `/tag-collage/${filename}`
  : tagInfo.preview;
const relatedTags = await getRelatedTags(tag);
const numberFormat = new Intl.NumberFormat();

export async function getStaticPaths() {
  await initDatabase();
  const tagNames = await listTags();
  return map(tagNames, (tagName) => ({
    params: { tag: tagName },
  }));
}
---

<Layout
  date={tagInfo.listUpdatedAt}
  imageSrc={preview}
  title={`Best 100 ${tag} releases`}
  url={`/tag/${encodeURIComponent(tag)}`}
>
  <span class="subtitle"
    >Last updated: <DateAgo client:load date={tagInfo.listUpdatedAt} ></DateAgo>, weight: {
      numberFormat.format(tagInfo.weight)
    }</span
  >
  <main>
    {
      tagInfo.description && (
        <details>
          <summary>Description of {tag} music</summary>
          {map(split(tagInfo.description, '\n'), (paragraph) => (
            <p>{paragraph}</p>
          ))}
        </details>
      )
    }
    {
      !isEmpty(relatedTags) && (
        <p>
          Related genres:{' '}
          {map(relatedTags, (relatedTag) => (
            <a href={`/tag/${encodeURIComponent(relatedTag)}`} class="tag is-link">{relatedTag}</a>
          ))}
        </p>
      )
    }
    <div class="tabs">
      <ul>
        <li class="is-active">
          <a href={`/tag/${encodeURIComponent(tag)}`}>Chart</a>
        </li>
        <li>
          <a href={`/tag/${encodeURIComponent(tag)}/timeline`}>Timeline chart</a
          >
        </li>
      </ul>
    </div>
    <AlbumsTable client:load albumsPlaces={tagInfo.list} />
  </main>
  <TagBackgroundImage fallbackImage={tagInfo.preview} tagName={tag} />
</Layout>
<style>
  details p {
    display: block;
    margin-block-start: 1em;
    margin-block-end: 1em;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
  }
</style>
