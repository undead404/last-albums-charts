---
import { formatDistance, formatISO, parseISO } from 'date-fns';
import filter from 'lodash/filter';
import isString from 'lodash/isString';
import map from 'lodash/map';
import maxBy from 'lodash/maxBy';

import TagBackgroundImage from '../../../components/tag-background-image.astro';
import TimelineChart from '../../../components/timeline-chart';
import Layout from '../../../layouts/layout.astro';
import { initDatabase } from '../../../services/data/database';
import getLatestDate from '../../../services/data/get-latest-date';
import getTimeline from '../../../services/data/get-timeline';
import listTags from '../../../services/data/list-tags';
import formatAlbum from '../../../utils/format-album';

const { tag } = Astro.params;
if (!isString(tag)) {
  throw new Error(`tag param of wrong type: ${tag}`);
}
await initDatabase();
const timeline = await getTimeline(tag);
const latestTagDate = await getLatestDate(tag);

let latestTagDateISO;
if (latestTagDate) {
  try {
    latestTagDateISO = formatISO(parseISO(latestTagDate));
  } catch (error) {
    console.error(error);
    console.error(`Invalid tag date: ${latestTagDate}`)
  }
}

const peak = maxBy(
  filter(timeline, ({ year }) => year <= new Date().getFullYear()),
  'result',
);
export async function getStaticPaths() {
  await initDatabase();
  const tagNames = await listTags();
  return map(tagNames, (tagName) => ({
    params: { tag: tagName },
  }));
}

let distanceString = 'some time';
try {
  if (latestTagDate) {
    distanceString = formatDistance(
            parseISO(latestTagDate),
            new Date(),
          )
  }
} catch (error) {
  // eslint-disable-next-line no-console
  console.error(error);
}
---

<Layout
  date={latestTagDateISO}
  title={`Timeline of ${tag} releases' performance`}
  url={`/tag/${encodeURIComponent(tag)}/timeline`}
>
  <main>
    {
      latestTagDate
        ? `Last relevant album added ${distanceString} ago.`
        : 'Nothing new here.'
    }
    {
      peak?.topAlbum
        ? `Peak year: ${peak.year} ${
            peak.topAlbum ? `(${formatAlbum(peak.topAlbum)})` : ''
          }`
        : 'No peak.'
    }
    <div class="tabs">
      <ul>
        <li><a href={`/tag/${encodeURIComponent(tag)}`}>Chart</a></li>
        <li class="is-active">
          <a href={`/tag/${encodeURIComponent(tag)}/timeline`}>Timeline chart</a
          >
        </li>
      </ul>
    </div>
    <TimelineChart timeline={timeline} client:idle />
  </main>
  <TagBackgroundImage tagName={tag} />
</Layout>
